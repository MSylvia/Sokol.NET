// Copyright (c) Lucas Girouard-Stranks. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Sokol.Graphics
{
    /// <summary>
    ///     Defines the different ways a source color (the fragment generated by a <see cref="Shader"/>) and the
    ///     destination color (the mapped color in the framebuffer or render target <see cref="Image"/>) are combined
    ///     before writing the color.
    /// </summary>
    /// <remarks>
    ///     <para>
    ///         Colors are represented by floating-point numbers, so adding them, subtracting them, and even multiplying
    ///         them are all perfectly valid operations.
    ///     </para>
    ///     <para>
    ///         An example of using <see cref="PipelineBlendOperation" /> and <see cref="PipelineBlendFactor" />
    ///         together to achieve straight blending of source and destination is the following represented
    ///         mathematically: <c>O = S * D</c>, or more explicitly, <c>O = D * S + 0 * D</c>. <c>O</c> is the color to
    ///         persist, <c>S</c> is the source color, and <c>D</c> is the destination color. To achieve this blending
    ///         operation use <see cref="PipelineBlendOperation.Add" /> along with
    ///         <see cref="PipelineBlendFactor.DestinationColor" /> for first parameter to multiply with the source
    ///         color and <see cref="PipelineBlendFactor.Zero" /> for the second parameter to multiply with the
    ///         destination color.
    ///     </para>
    ///     <para>
    ///         <see cref="PipelineBlendOperation" /> is blittable to the C `sg_blend_op` enum found in `sokol_gfx`.
    ///     </para>
    /// </remarks>
    public enum PipelineBlendOperation
    {
        /// <summary>
        ///     This value is reserved for the default initialization of structures. The default
        ///     <see cref="PipelineBlendOperation" /> is <see cref="Add" />.
        /// </summary>
        Default,

        /// <summary>
        ///     The source and destination colors are added to each other. Mathematically, the output color is:
        ///     <c>O = s * S + d * D</c>. <c>s</c> and <c>d</c> are the blending parameters for source and destination,
        ///     respectively, and are defined by <see cref="PipelineBlendFactor" />. <c>S</c> and <c>D</c> are the
        ///     source and destination colors, respectively.
        /// </summary>
        Add,

        /// <summary>
        ///     The source is subtracted by the destination. Mathematically, the output color is:
        ///     <c>O = s * S - d * D</c>. <c>s</c> and <c>d</c> are the blending parameters for source and destination,
        ///     respectively, and are defined by <see cref="PipelineBlendFactor" />. <c>S</c> and <c>D</c> are the
        ///     source and destination colors, respectively.
        /// </summary>
        Subtract,

        /// <summary>
        ///     The destination is subtracted by the source. Mathematically, the output color is:
        ///     <c>O = d * D - s * S</c>. <c>s</c> and <c>d</c> are the blending parameters for source and destination,
        ///     respectively, and are defined by <see cref="PipelineBlendFactor" />. <c>S</c> and <c>D</c> are the
        ///     source and destination colors, respectively.
        /// </summary>
        ReverseSubtract
    }
}
